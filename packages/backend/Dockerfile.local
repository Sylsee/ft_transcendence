#FROM node:12.13-alpine As development
#
#WORKDIR /usr/src/app
#
#COPY package*.json ./
#
#RUN npm i -g @nestjs/cli --silent
##RUN npm install glob rimraf
#RUN npm install
#
#COPY . .
#
#EXPOSE 3000
#
##RUN npm run build
#CMD ["npm", "run", "start:debug"]
#
#FROM node:12.13-alpine As production
#
#ARG NODE_ENV=production
#ENV NODE_ENV=${NODE_ENV}
#
#WORKDIR /usr/src/app
#
#COPY package*.json ./
#
#RUN npm install --only=production
#
#COPY . .
#
#COPY --from=development /usr/src/app/dist ./dist
#
#CMD ["node", "dist/main"]

#FROM node:14-alpine
#RUN mkdir -p /svr/app
#WORKDIR /svr/app
#COPY package.json .
#COPY package-lock.json .
#RUN npm install --silent
#COPY . .
# Value set in .env file.
#EXPOSE $BACKEND_PORT
#CMD ["npm", "run", "start:debug"]

#FROM node:12-alpine As development
#
#WORKDIR /usr/src/app
#
#RUN npm i -g @nestjs/cli --silent
#CMD [ -d "node_modules" ] && npm run start:dev || npm ci && npm run start:dev

###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:18-alpine As development

# Create app directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

# Install app dependencies using the `npm ci` command instead of `npm install`
RUN npm ci

# Bundle app source
COPY --chown=node:node . .

# Use the node user from the image (instead of the root user)
USER node

